@using TermProject.Models;
@model PaginatedList<TermProject.Models.Workouts>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<!-- Search Form -->
<form method="get" class="search-container d-flex justify-content-end">
    <div class="form-group">
        <label for="searchString">Search by Workout Name:</label>
        <input type="text" id="searchString" name="searchString" value="@ViewData["CurrentFilter"]" class="form-control" placeholder="Search by name..." />
    </div>
    <button type="submit">Search</button>
    <a asp-action="Index"> Back to Full List </a>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayName("Workout")
            </th>
            <th>
                <a href="@Url.Action("Index", new { sortOrder = ViewData["BodyGroupSortParam"], pageNumber = ViewData["CurrentPage"], searchString = ViewData["CurrentFilter"] })" class="sortable-column">
                    @Html.DisplayName("Body Group")
                    @if (ViewData["BodyGroupSortParam"].ToString() == "bodygroup_desc")
                    {
                        <span>&#x2191;</span> <!-- Upward arrow for ascending order -->
                    }
                    else
                    {
                        <span>&#x2193;</span> <!-- Downward arrow for descending order -->
                    }
                </a>
            </th>
            <th>
                @Html.DisplayName("# of Sets")
            </th>
            <th>
                @Html.DisplayName("# of Reps")
            </th>
            <th>
                @Html.DisplayName("Weight Ibs")
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BodyGroup.BodyGroupName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Sets)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Reps)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Weight)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled" style="color:saddlebrown">
    Previous
</a>

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled" style="color:saddlebrown">
    Next
</a>